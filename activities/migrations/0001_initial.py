# Generated by Django 4.2.24 on 2025-09-27 01:55

import activities.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, help_text='Téléchargez une image pour votre avatar (JPG, PNG, GIF ou WebP - 2MB max)', null=True, upload_to=activities.models.avatar_upload_path, validators=[activities.models.validate_avatar_extension, activities.models.validate_avatar_size])),
                ('bio', models.TextField(blank=True, help_text='Parlez-nous un peu de vous (optionnel).', max_length=500, null=True, verbose_name='Biographie')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'Le nom de la catégorie ne peut pas être vide.', 'max_length': 'Le nom de la catégorie ne peut pas dépasser 100 caractères.', 'unique': 'Une catégorie avec ce nom existe déjà.'}, max_length=100, unique=True, verbose_name='Nom de la catégorie')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(error_messages={'blank': 'Le titre ne peut pas être vide.'}, max_length=200, validators=[django.core.validators.MinLengthValidator(5, 'Le titre doit contenir au moins 5 caractères.'), django.core.validators.MaxLengthValidator(200, 'Le titre doit contenir au plus 200 caractères.')], verbose_name='Titre')),
                ('description', models.TextField(error_messages={'blank': 'La description ne peut pas être vide.'}, validators=[django.core.validators.MinLengthValidator(10, 'La description doit contenir au moins 10 caractères.')], verbose_name='Description')),
                ('location_city', models.CharField(error_messages={'blank': 'La ville ne peut pas être vide.', 'max_length': 'La ville ne peut pas dépasser 100 caractères.'}, max_length=100, validators=[django.core.validators.MinLengthValidator(2, 'La ville doit contenir au moins 2 caractères.')], verbose_name='Ville')),
                ('start_time', models.DateTimeField(error_messages={'required': "La date et l'heure de début sont requises."}, verbose_name='Date et heure de début')),
                ('end_time', models.DateTimeField(error_messages={'required': "La date et l'heure de fin sont requises."}, verbose_name='Date et heure de fin')),
                ('document', models.FileField(blank=True, help_text="Joindre un document à l'activité (PDF, DOC, DOCX, images - 5MB max)", null=True, upload_to=activities.models.document_upload_path, validators=[activities.models.validate_file_extension, activities.models.validate_file_size], verbose_name='Document joint')),
                ('attendees', models.ManyToManyField(blank=True, related_name='attended_activities', to=settings.AUTH_USER_MODEL, verbose_name='Participants')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='activities.category', verbose_name='Catégorie')),
                ('proposer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposed_activities', to=settings.AUTH_USER_MODEL, verbose_name='Organisateur')),
            ],
            options={
                'verbose_name': 'Activité',
                'verbose_name_plural': 'Activités',
                'ordering': ['start_time'],
            },
        ),
    ]
